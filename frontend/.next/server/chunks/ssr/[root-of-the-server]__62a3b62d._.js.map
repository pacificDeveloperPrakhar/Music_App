{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///home/prakhar/Desktop/prakhar/Music_App/frontend/src/app/components/audio_playback.tsx"],"sourcesContent":["// components/HLSAudioPlayer.tsx\n'use client';\n\nimport { useEffect, useRef } from 'react';\nimport Hls from 'hls.js';\n\ninterface HLSAudioPlayerProps {\n  src: string;\n}\n\nconst HLSAudioPlayer: React.FC<HLSAudioPlayerProps> = ({ src }) => {\n  const audioRef = useRef<HTMLAudioElement>(null);\n\n  useEffect(() => {\n    if (Hls.isSupported() && audioRef.current) {\n        const hls = new Hls({\n            maxBufferLength: 10,        // Target 10 seconds of buffer\n            maxMaxBufferLength: 20,     // Hard limit of 20 seconds\n            maxBufferSize: 640000,      // ~400 KB buffer size\n          });\n          \n      hls.startLevel = 0; // index in the manifest (0 = lowest = 64k)\n\n      hls.loadSource(src);\n      hls.attachMedia(audioRef.current);\n\n      hls.on(Hls.Events.MANIFEST_PARSED, () => {\n        audioRef.current?.play().catch((err) => console.error(err));\n      });\n\n      return () => {\n        hls.destroy();\n      };\n    } else if (audioRef.current?.canPlayType('application/vnd.apple.mpegurl')) {\n      // For Safari\n      audioRef.current.src = src;\n      audioRef.current.play().catch((err) => console.error(err));\n    }\n  }, [src]);\n\n  return <audio ref={audioRef} controls />;\n};\n\nexport default HLSAudioPlayer;\n"],"names":[],"mappings":"AAAA,gCAAgC;;;;;AAGhC;AACA;AAHA;;;;AASA,MAAM,iBAAgD,CAAC,EAAE,GAAG,EAAE;IAC5D,MAAM,WAAW,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAoB;IAE1C,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,yIAAA,CAAA,UAAG,CAAC,WAAW,MAAM,SAAS,OAAO,EAAE;YACvC,MAAM,MAAM,IAAI,yIAAA,CAAA,UAAG,CAAC;gBAChB,iBAAiB;gBACjB,oBAAoB;gBACpB,eAAe;YACjB;YAEJ,IAAI,UAAU,GAAG,GAAG,2CAA2C;YAE/D,IAAI,UAAU,CAAC;YACf,IAAI,WAAW,CAAC,SAAS,OAAO;YAEhC,IAAI,EAAE,CAAC,yIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,eAAe,EAAE;gBACjC,SAAS,OAAO,EAAE,OAAO,MAAM,CAAC,MAAQ,QAAQ,KAAK,CAAC;YACxD;YAEA,OAAO;gBACL,IAAI,OAAO;YACb;QACF,OAAO,IAAI,SAAS,OAAO,EAAE,YAAY,kCAAkC;YACzE,aAAa;YACb,SAAS,OAAO,CAAC,GAAG,GAAG;YACvB,SAAS,OAAO,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC,MAAQ,QAAQ,KAAK,CAAC;QACvD;IACF,GAAG;QAAC;KAAI;IAER,qBAAO,8OAAC;QAAM,KAAK;QAAU,QAAQ;;;;;;AACvC;uCAEe","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///home/prakhar/Desktop/prakhar/Music_App/frontend/src/app/playback/page.tsx"],"sourcesContent":["\"use client\";\nimport { NextPage } from 'next';\nimport { useRef, useEffect, useState } from \"react\";\nimport AudioPlayBack from \"../components/audio_playback\"\ninterface Props {}\n\nconst Playbox: NextPage<Props> = ({}) => {\n  const ctx = useRef(new AudioContext());\n  const flag = useRef(false);\n  const gainNode = useRef(ctx.current.createGain());\n  const bassFilter = useRef(ctx.current.createBiquadFilter());\n  const [volume, setVolume] = useState(1);\n  const oscillatorRef = useRef<OscillatorNode | null>(null);\n\n  useEffect(() => {\n    // Configure bass filter\n    bassFilter.current.type = \"lowshelf\";\n    bassFilter.current.frequency.setValueAtTime(200, ctx.current.currentTime); // Frequencies below 200Hz\n    bassFilter.current.gain.setValueAtTime(105, ctx.current.currentTime); // Boost bass by 15dB\n\n    // Chain: bassFilter → gainNode → destination\n    bassFilter.current.connect(gainNode.current);\n    gainNode.current.connect(ctx.current.destination);\n  }, []);\n\n  return (\n    <div>\n      <button\n        data-playing=\"false\"\n        role=\"switch\"\n        aria-checked=\"false\"\n        onClick={() => {\n          if (!flag.current) {\n            console.log(\"music on\");\n            const oscillator = ctx.current.createOscillator();\n            oscillator.type = \"sawtooth\";\n            oscillator.connect(bassFilter.current); // Connect to bass filter\n            oscillator.start();\n            oscillatorRef.current = oscillator;\n          } else {\n            oscillatorRef.current?.stop();\n            oscillatorRef.current = null;\n          }\n          flag.current = !flag.current;\n        }}\n      >\n        <span>Play/Pause</span>\n      </button>\n\n      <button\n        onClick={() => {\n          gainNode.current.gain.setValueAtTime(0.1, ctx.current.currentTime);\n          setVolume(3);\n        }}\n      >\n        volume {`${volume}`}\n      </button>\n      <AudioPlayBack src={\"./audios/master.m3u8\"}/>\n    </div>\n  );\n};\n\nexport default Playbox;\n"],"names":[],"mappings":";;;;AAEA;AACA;AAHA;;;;AAMA,MAAM,UAA2B,CAAC,EAAE;IAClC,MAAM,MAAM,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAE,IAAI;IACvB,MAAM,OAAO,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAE;IACpB,MAAM,WAAW,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAE,IAAI,OAAO,CAAC,UAAU;IAC9C,MAAM,aAAa,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAE,IAAI,OAAO,CAAC,kBAAkB;IACxD,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACrC,MAAM,gBAAgB,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAyB;IAEpD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,wBAAwB;QACxB,WAAW,OAAO,CAAC,IAAI,GAAG;QAC1B,WAAW,OAAO,CAAC,SAAS,CAAC,cAAc,CAAC,KAAK,IAAI,OAAO,CAAC,WAAW,GAAG,0BAA0B;QACrG,WAAW,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,IAAI,OAAO,CAAC,WAAW,GAAG,qBAAqB;QAE3F,6CAA6C;QAC7C,WAAW,OAAO,CAAC,OAAO,CAAC,SAAS,OAAO;QAC3C,SAAS,OAAO,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,WAAW;IAClD,GAAG,EAAE;IAEL,qBACE,8OAAC;;0BACC,8OAAC;gBACC,gBAAa;gBACb,MAAK;gBACL,gBAAa;gBACb,SAAS;oBACP,IAAI,CAAC,KAAK,OAAO,EAAE;wBACjB,QAAQ,GAAG,CAAC;wBACZ,MAAM,aAAa,IAAI,OAAO,CAAC,gBAAgB;wBAC/C,WAAW,IAAI,GAAG;wBAClB,WAAW,OAAO,CAAC,WAAW,OAAO,GAAG,yBAAyB;wBACjE,WAAW,KAAK;wBAChB,cAAc,OAAO,GAAG;oBAC1B,OAAO;wBACL,cAAc,OAAO,EAAE;wBACvB,cAAc,OAAO,GAAG;oBAC1B;oBACA,KAAK,OAAO,GAAG,CAAC,KAAK,OAAO;gBAC9B;0BAEA,cAAA,8OAAC;8BAAK;;;;;;;;;;;0BAGR,8OAAC;gBACC,SAAS;oBACP,SAAS,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,IAAI,OAAO,CAAC,WAAW;oBACjE,UAAU;gBACZ;;oBACD;oBACS,GAAG,QAAQ;;;;;;;0BAErB,8OAAC,2IAAA,CAAA,UAAa;gBAAC,KAAK;;;;;;;;;;;;AAG1B;uCAEe","debugId":null}}]
}